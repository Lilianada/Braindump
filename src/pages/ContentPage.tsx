import React, { useEffect, useState } from 'react';
import { useParams, useLocation, useOutletContext, Link } from 'react-router-dom';
import { findContentByPath, getAllContentItems, ContentItem } from '@/content/mockData';
import { AlertCircle, FileText, Info, Tag as TagIcon, CalendarDays } from 'lucide-react';
import SimpleRenderer from '@/components/SimpleRenderer';
import { TocItem } from '@/types';
import { AppContextType } from '@/components/Layout';
import { extractMarkdownBody } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';

const ContentPage: React.FC = () => {
  const params = useParams();
  const location = useLocation();
  const [contentItem, setContentItem] = useState<ContentItem | null | undefined>(undefined);
  
  const { setTocItems, setCurrentContentItem, setAllNotesForContext } = useOutletContext<AppContextType>();

  const [allNotesAndTopics, setAllNotesAndTopics] = useState<ContentItem[]>([]);
  const [glossaryTerms, setGlossaryTerms] = useState<ContentItem[]>([]);

  useEffect(() => {
    const allItems = getAllContentItems();
    const notesAndTopics = allItems.filter(item => 
      item.type === 'note' || 
      item.type === 'topic' || 
      item.type === 'log' || 
      item.type === 'dictionary_entry'
    );
    setAllNotesAndTopics(notesAndTopics);
    setAllNotesForContext(notesAndTopics);

    const terms = allItems.filter(item => item.type === 'glossary_term');
    setGlossaryTerms(terms);

    const path = params['*'];
    if (path) {
      const item = findContentByPath(path);
      setContentItem(item);
      setCurrentContentItem(item); 

      if (item) {
        const markdownBody = extractMarkdownBody(item.content ? item.content.replace(/\\n/g, '\n') : "");
        if (!markdownBody) {
          setTocItems([]);
        }
        // TOC is generated by SimpleRenderer's custom heading components
      } else {
        setTocItems([]);
      }
    } else {
      setContentItem(null); 
      setCurrentContentItem(null);
      setTocItems([]);
    }
  }, [params, location.pathname, setTocItems, setCurrentContentItem, setAllNotesForContext]);

  if (contentItem === undefined) {
    return (
      <div className="flex items-center justify-center h-full">
        <p className="text-muted-foreground">Loading content...</p>
      </div>
    );
  }

  if (!contentItem) {
    return (
      <div className="container mx-auto py-8 text-center animate-fade-in">
        <AlertCircle className="h-16 w-16 text-destructive mx-auto mb-4" />
        <h1 className="text-3xl font-bold mb-2">Content Not Found</h1>
        <p className="text-muted-foreground">
          The page or note you were looking for ({params['*']}) could not be found.
        </p>
        <p className="mt-4">
          Please check the URL or navigate using the sidebar.
        </p>
      </div>
    );
  }

  // Prepare content for rendering: extract body and replace literal \\n with actual newlines
  const rawMarkdownBody = extractMarkdownBody(contentItem.content);
  const markdownContentToRender = rawMarkdownBody.replace(/\\n/g, '\n');

  // Derive category from path
  let category: string | null = null;
  const pathParts = contentItem.path.split('/');
  if (pathParts.length > 1 && contentItem.type !== 'folder') {
    category = pathParts.slice(0, -1).join('/'); // Takes the parent path as category
    // Capitalize first letter of each part of category for display
    category = category.split('/').map(part => part.charAt(0).toUpperCase() + part.slice(1)).join(' / ');
  }
  // Check if a "category" tag exists
  const categoryTag = contentItem.tags?.find(tag => tag.toLowerCase().startsWith('category:'));
  if (categoryTag) {
    category = categoryTag.substring('category:'.length).trim();
  }

  if (contentItem.type === 'folder') {
    return (
      <div className="container mx-auto py-8 animate-fade-in">
        <header className="mb-8">
          <h1 className="text-4xl font-bold text-primary mb-2">{contentItem.title}</h1>
          <p className="text-sm text-muted-foreground">
            Type: {contentItem.type} | Path: /content/{contentItem.path}
          </p>
        </header>
        <p className="text-muted-foreground mb-4">This is a category or folder. Select an item from its children in the sidebar, or this folder might have its own content below.</p>
        
        {markdownContentToRender ? (
          <SimpleRenderer 
            content={markdownContentToRender} 
            setTocItems={setTocItems} 
            allNotes={allNotesAndTopics}
            glossaryTerms={glossaryTerms}
          />
        ) : (
          contentItem.children && contentItem.children.length > 0 && (
            <div>
              <h2 className="text-xl font-semibold mb-2 mt-6">Contents:</h2>
              <ul className="list-disc list-inside space-y-1">
                {contentItem.children.map(child => (
                  <li key={child.id}>
                    <Link to={`/content/${child.path}`} className="custom-link">
                      {child.title} ({child.type})
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          )
        )}
        {!markdownContentToRender && (!contentItem.children || contentItem.children.length === 0) && (
          <p className="text-muted-foreground">This folder is currently empty or has no overview content.</p>
        )}
      </div>
    );
  }

  return (
    <article className="container mx-auto py-8 animate-fade-in">
      <header className="mb-8">
        <h1 className="text-4xl font-bold text-primary mb-2">{contentItem.title}</h1>
        {/* Metadata section from frontmatter/contentItem properties */}
        <div className="mt-3 mb-6 text-sm text-muted-foreground space-y-1">
          {contentItem.lastUpdated && (
            <div className="flex items-center">
              <CalendarDays className="h-4 w-4 mr-2" />
              <span>Last Updated: {new Date(contentItem.lastUpdated).toLocaleDateString()}</span>
            </div>
          )}
          {category && (
             <div className="flex items-center">
              <Info className="h-4 w-4 mr-2" />
              <span>Category: {category}</span>
            </div>
          )}
          {contentItem.frontmatter?.source && (
             <div className="flex items-center">
               <Info className="h-4 w-4 mr-2" />
                <span>Source: {contentItem.frontmatter.source}</span>
             </div>
          )}
        </div>

        {contentItem.tags && contentItem.tags.length > 0 && (
          <div className="mb-6">
            <div className="flex items-center text-sm text-muted-foreground mb-2">
              <TagIcon className="h-4 w-4 mr-2" />
              <span>Tags:</span>
            </div>
            <div className="flex flex-wrap gap-2">
              {contentItem.tags.filter(tag => !tag.toLowerCase().startsWith('category:')).map(tag => ( // Filter out category tags if displayed separately
                <Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>
              ))}
            </div>
          </div>
        )}
      </header>
      
      {markdownContentToRender ? (
        <SimpleRenderer 
          content={markdownContentToRender} 
          setTocItems={setTocItems}
          allNotes={allNotesAndTopics}
          glossaryTerms={glossaryTerms}
        />
      ) : (
        <div className="flex flex-col items-center justify-center text-center text-muted-foreground p-8 border border-dashed rounded-lg">
          <FileText className="h-12 w-12 mb-4" />
          <p>No content available for this item yet.</p>
          <p className="text-sm">This might be a note that is pending content.</p>
        </div>
      )}
    </article>
  );
};

export default ContentPage;
